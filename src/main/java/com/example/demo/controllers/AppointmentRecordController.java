package com.example.demo.controllers;

import com.example.demo.dto.AppointmentRecordDTO;
import com.example.demo.entity.AppointmentRecord;
import com.example.demo.entity.Client;
import com.example.demo.repository.ClientRepository;
import com.example.demo.service.AppointmentRecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/appointment-records")
public class AppointmentRecordController {

    @Autowired
    private AppointmentRecordService appointmentRecordService;

    @Autowired
    private ClientRepository clientRepository;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    @GetMapping
    public ResponseEntity<List<AppointmentRecordDTO>> getAllRecords() {
        return ResponseEntity.ok(appointmentRecordService.getAllRecordsAsDTO());
    }

    // üî• –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
    @GetMapping("/my-records")
    public ResponseEntity<List<AppointmentRecordDTO>> getMyRecords(Authentication authentication) {
        Long userId;

         if (authentication.getPrincipal() instanceof Map<?, ?> claimsMap) {
            Map<String, Object> claims = (Map<String, Object>) claimsMap;
            String sub = (String) claims.get("sub");

            if (sub == null || sub.isEmpty()) {
                throw new RuntimeException("–ü–æ–ª–µ 'sub' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ");
            }

            try {
                userId = Long.valueOf(sub);
            } catch (NumberFormatException e) {
                throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ —Ç–æ–∫–µ–Ω–µ", e);
            }
        }
        else {
            throw new RuntimeException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Principal: " + authentication.getPrincipal().getClass().getName());
        }

        List<AppointmentRecordDTO> records = appointmentRecordService.findRecordsByClientId(userId);
        return ResponseEntity.ok(records);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
    @GetMapping("/{recordId}")
    public ResponseEntity<AppointmentRecordDTO> getRecordById(@PathVariable Integer recordId) {
        return appointmentRecordService.getRecordByIdAsDTO(recordId)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    @PostMapping
    public ResponseEntity<AppointmentRecordDTO> createRecord(@RequestBody AppointmentRecordDTO dto) {
        AppointmentRecord createdRecord = appointmentRecordService.createRecordFromDTO(dto);
        return ResponseEntity.status(201).body(appointmentRecordService.convertToDTO(createdRecord));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @PutMapping("/{recordId}")
    public ResponseEntity<AppointmentRecordDTO> updateRecord(
            @PathVariable Integer recordId,
            @RequestBody AppointmentRecordDTO dto) {

        AppointmentRecord updatedRecord = appointmentRecordService.updateRecordFromDTO(recordId, dto);
        return ResponseEntity.ok(appointmentRecordService.convertToDTO(updatedRecord));
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @DeleteMapping("/{recordId}")
    public ResponseEntity<Void> deleteRecord(@PathVariable Integer recordId) {
        appointmentRecordService.deleteRecord(recordId);
        return ResponseEntity.noContent().build();
    }
}