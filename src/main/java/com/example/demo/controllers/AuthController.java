package com.example.demo.controllers;

import com.example.demo.dto.*;
import com.example.demo.entity.Admin;
import com.example.demo.entity.Client;
import com.example.demo.entity.Doctor;
import com.example.demo.entity.Role;
import com.example.demo.repository.AdminRepository;
import com.example.demo.repository.ClientRepository;
import com.example.demo.repository.DoctorRepository;
import com.example.demo.security.JwtTokenService;
import com.example.demo.service.BlacklistService;
import com.example.demo.service.UserDetailsServiceImpl;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.example.demo.dto.ChangePasswordRequest;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;

import java.time.LocalDateTime;

@Controller
@RequestMapping("/auth")
public class AuthController {

    @Autowired private AuthenticationManager authenticationManager;
    @Autowired private JwtTokenService jwtTokenService;
    @Autowired private UserDetailsServiceImpl userDetailsService;
    @Autowired private ClientRepository clientRepository;
    @Autowired private DoctorRepository doctorRepository;
    @Autowired private AdminRepository adminRepository;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private BlacklistService blacklistService;


       // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–±—â–∞—è)
    // –Ω–∞ —Å–≤–µ—Ç–ª—É—é –∏ –¥–æ–±—Ä—É—é –ø–∞–º—è—Ç—å:
    /*
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest, HttpServletResponse response) {
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        UserDetails userDetails = userDetailsService.loadUserByUsername(loginRequest.getUsername());
        String token = jwtTokenService.generateToken(userDetails);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –∫—É–∫–∏:
        Cookie jwtCookie = new Cookie("jwt", token);
        jwtCookie.setHttpOnly(true); // –∑–∞—â–∏—Ç–∞ XSS
        jwtCookie.setPath("/");
        jwtCookie.setMaxAge(60 * 60 * 24);  // –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏
        response.addCookie(jwtCookie);
        return ResponseEntity.ok("Login successful");
    }
    */
    @PostMapping("/login")
    public String login(@RequestParam String login, @RequestParam String password, HttpServletResponse response) {
        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(login, password)
            );

            UserDetails userDetails = userDetailsService.loadUserByUsername(login);
            String token = jwtTokenService.generateToken(userDetails);

            Cookie jwtCookie = new Cookie("jwt", token);
            jwtCookie.setHttpOnly(true);
            jwtCookie.setPath("/");
            jwtCookie.setMaxAge(60 * 60 * 24);
            response.addCookie(jwtCookie);

            return "redirect:/client/dashboard";
        } catch (Exception e) {
            return "redirect:/auth/login?error=invalid_credentials";  // —Å—É–∫–∞ –∏ —Ç—É—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É–∂–µ –∑–∞–Ω—è—Ç–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–∏—Ñ–∏–≥–∞ –Ω–µ –ø–æ–Ω—è—Ç—å
        }
    }




    @PostMapping("/change-password")
    public ResponseEntity<?> changePassword(@RequestBody ChangePasswordRequest request, Authentication authentication) {
        String username = authentication.getName();
        String role = authentication.getAuthorities().stream()
                .findFirst()
                .map(grantedAuthority -> grantedAuthority.getAuthority()) // –Ω–∞–ø—Ä–∏–º–µ—Ä: ROLE_CLIENT
                .orElseThrow(() -> new RuntimeException("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (request.getOldPassword().equals(request.getNewPassword())) {
            return ResponseEntity.badRequest().body("–ù–æ–≤—ã–π –∏ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è, –±—Ä–∞—Ç");
        }

        try {
            userDetailsService.changePassword(username, role, request.getOldPassword(), request.getNewPassword());
            return ResponseEntity.ok("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @PostMapping("/logout")
    public ResponseEntity<?> logout(HttpServletResponse response) {

        Cookie jwtCookie = new Cookie("jwt", "");
        jwtCookie.setHttpOnly(true);
        jwtCookie.setPath("/");
        jwtCookie.setMaxAge(0);

        response.addCookie(jwtCookie);

        return ResponseEntity.ok("Logged out successfully");
    }

    @GetMapping("/login")
    public String showLoginPage() {
        return "login"; // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É login.html
    }

}
